"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const backend_nestjs_1 = require("@ts-core/backend-nestjs");
const backend_nestjs_2 = require("@ts-core/backend-nestjs");
const common_2 = require("@ts-core/common");
const backend_nestjs_3 = require("@ts-core/backend-nestjs");
const express_1 = require("express");
const compression = require("compression");
const nocache = require("nocache");
const helmet_1 = require("helmet");
const AppModule_1 = require("./src/AppModule");
const AppSettings_1 = require("./src/AppSettings");
const middleware_1 = require("@project/module/core/middleware");
async function bootstrap() {
    let settings = new AppSettings_1.AppSettings();
    let logger = (settings.logger = new backend_nestjs_1.DefaultLogger(settings.loggerLevel));
    let application = await core_1.NestFactory.create(AppModule_1.AppModule.forRoot(settings), { logger });
    application.useLogger(logger);
    application.use((0, helmet_1.default)());
    application.use(nocache());
    application.use(compression());
    application.enableCors({ origin: true });
    application.useGlobalPipes(new common_1.ValidationPipe({ transform: true }));
    application.useGlobalFilters(new backend_nestjs_3.AllErrorFilter(new backend_nestjs_3.ValidationExceptionFilter(), new middleware_1.CoreExtendedErrorFilter(), new backend_nestjs_2.ExtendedErrorFilter(), new backend_nestjs_2.HttpExceptionFilter()));
    application.use((0, express_1.json)({ limit: '50mb' }));
    application.use((0, express_1.urlencoded)({ extended: true, limit: '50mb' }));
    const server = application.getHttpServer();
    server.setTimeout(10 * common_2.DateUtil.MILLISECONDS_MINUTE);
    await application.listen(settings.webPort);
    logger.log(`Listening "${settings.webPort}" port`);
}
bootstrap();
